import { Component, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { ReactiveFormsModule, FormBuilder, FormGroup, FormArray, Validators } from '@angular/forms';
import { MatDialogRef, MatDialogModule } from '@angular/material/dialog';
import { MatSnackBar } from '@angular/material/snack-bar';
import { MatFormFieldModule } from '@angular/material/form-field';
import { MatInputModule } from '@angular/material/input';
import { MatSelectModule } from '@angular/material/select';
import { MatCheckboxModule } from '@angular/material/checkbox';
import { MatButtonModule } from '@angular/material/button';
import { MatIconModule } from '@angular/material/icon';
import { InventoryService } from '../../services/inventory.service';
import { Product } from '../../models/product.model';
import { Delivery, DeliveryItem } from '../../models/delivery.model';

@Component({
  selector: 'app-delivery-form',
  standalone: true,
  imports: [
    CommonModule,
    ReactiveFormsModule,
    MatDialogModule,
    MatFormFieldModule,
    MatInputModule,
    MatSelectModule,
    MatCheckboxModule,
    MatButtonModule,
    MatIconModule
  ],
  templateUrl: './delivery-form.component.html',
  styleUrls: ['./delivery-form.component.css']
})
export class DeliveryFormComponent implements OnInit {
  deliveryForm: FormGroup;
  availableProducts: Product[] = [];
  loading = false;

  constructor(
    private fb: FormBuilder,
    private inventoryService: InventoryService,
    private snackBar: MatSnackBar,
    public dialogRef: MatDialogRef<DeliveryFormComponent>
  ) {
    this.deliveryForm = this.createForm();
  }

  ngOnInit(): void {
    this.loadAvailableProducts();
  }

  createForm(): FormGroup {
    return this.fb.group({
      deliveryAgent: ['', [Validators.required]],
      customerAddress: ['', [Validators.required]],
      customerPhone: ['', [Validators.required]],
      notes: [''],
      items: this.fb.array([this.createItemForm()])
    });
  }

  createItemForm(): FormGroup {
    return this.fb.group({
      productSku: ['', [Validators.required]],
      quantity: [1, [Validators.required, Validators.min(1)]],
      isDamaged: [false]
    });
  }

  get items(): FormArray {
    return this.deliveryForm.get('items') as FormArray;
  }

  loadAvailableProducts(): void {
    this.inventoryService.getAvailableProducts().subscribe({
      next: (products) => {
        this.availableProducts = products.filter(p => p.quantity > 0);
      },
      error: (error) => {
        console.error('Error loading products:', error);
        this.snackBar.open('Error loading products', 'Close', { duration: 3000 });
      }
    });
  }

  addItem(): void {
    this.items.push(this.createItemForm());
  }

  removeItem(index: number): void {
    if (this.items.length > 1) {
      this.items.removeAt(index);
    }
  }

  getProductName(sku: string): string {
    const product = this.availableProducts.find(p => p.sku === sku);
    return product ? product.name : '';
  }

  getMaxQuantity(sku: string): number {
    const product = this.availableProducts.find(p => p.sku === sku);
    return product ? product.quantity : 0;
  }

  onProductChange(index: number): void {
    const item = this.items.at(index);
    const sku = item.get('productSku')?.value;
    const maxQuantity = this.getMaxQuantity(sku);
    
    // Update quantity validator
    const quantityControl = item.get('quantity');
    quantityControl?.setValidators([
      Validators.required,
      Validators.min(1),
      Validators.max(maxQuantity)
    ]);
    quantityControl?.updateValueAndValidity();
  }

  onSubmit(): void {
    if (this.deliveryForm.valid) {
      this.loading = true;
      const formValue = this.deliveryForm.value;
      
      // Add product names to items
      const items = formValue.items.map((item: any) => ({
        ...item,
        productName: this.getProductName(item.productSku)
      }));

      const delivery: Delivery = {
        ...formValue,
        items,
        deliveryId: '', // Will be generated by backend
        status: 'PENDING' as any,
        createdAt: new Date().toISOString()
      };

      this.inventoryService.createDelivery(delivery).subscribe({
        next: (createdDelivery) => {
          this.snackBar.open('Delivery created successfully', 'Close', { duration: 3000 });
          this.dialogRef.close(true);
          this.loading = false;
        },
        error: (error) => {
          console.error('Error creating delivery:', error);
          this.snackBar.open('Error creating delivery', 'Close', { duration: 3000 });
          this.loading = false;
        }
      });
    }
  }

  onCancel(): void {
    this.dialogRef.close(false);
  }
}